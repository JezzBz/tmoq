const http = require('http');

const BASE_URL = 'http://localhost:3000';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(method, path, data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const response = JSON.parse(body);
          resolve({ status: res.statusCode, data: response });
        } catch (error) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function testHealthCheck() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...');
  try {
    const response = await makeRequest('GET', '/health');
    console.log('‚úÖ Health check:', response.status, response.data);
    return response.status === 200;
  } catch (error) {
    console.log('‚ùå Health check failed:', error.message);
    return false;
  }
}

async function testCreateBeneficiary() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–∞...');
  try {
    const beneficiaryData = {
      type: 'INDIVIDUAL',
      firstName: '–¢–µ—Å—Ç',
      lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      phoneNumber: '+79001234567'
    };
    
    const response = await makeRequest('POST', '/api/v1/beneficiaries', beneficiaryData);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–∞:', response.status, response.data);
    return response.status === 201;
  } catch (error) {
    console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–∞ failed:', error.message);
    return false;
  }
}

async function testGetBeneficiaries() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–æ–≤...');
  try {
    const response = await makeRequest('GET', '/api/v1/beneficiaries');
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–æ–≤:', response.status, response.data);
    return response.status === 200;
  } catch (error) {
    console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–æ–≤ failed:', error.message);
    return false;
  }
}

async function testCreateBalance() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...');
  try {
    const balanceData = {
      beneficiaryId: 1,
      amount: 10000.00,
      currency: 'RUB'
    };
    
    const response = await makeRequest('POST', '/api/v1/balances', balanceData);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:', response.status, response.data);
    return response.status === 201;
  } catch (error) {
    console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ failed:', error.message);
    return false;
  }
}

async function testCreateDeal() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏...');
  try {
    const dealData = {
      title: '–¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–¥–µ–ª–∫–∏',
      amount: 50000.00,
      currency: 'RUB',
      beneficiaryId: 1
    };
    
    const response = await makeRequest('POST', '/api/v1/deals', dealData);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏:', response.status, response.data);
    return response.status === 201;
  } catch (error) {
    console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ failed:', error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...\n');
  
  const tests = [
    testHealthCheck,
    testCreateBeneficiary,
    testGetBeneficiaries,
    testCreateBalance,
    testCreateDeal
  ];
  
  let passedTests = 0;
  let totalTests = tests.length;
  
  for (const test of tests) {
    const result = await test();
    if (result) {
      passedTests++;
    }
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  }
  
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${totalTests}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalTests - passedTests}/${totalTests}`);
  
  if (passedTests === totalTests) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error); 